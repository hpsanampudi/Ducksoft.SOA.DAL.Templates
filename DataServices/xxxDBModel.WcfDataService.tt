<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ include file="EF6.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#



//This file is made by cloning and customizing the original T4 file from EntityFramework
//AdventureWorksModel.tt




//Specify values for the constant below to drive the generation of
//the automatically generated file "EntityInterfaceGenerator.IEntities.cs"
//const string dbName = "xxxDB";
const string dbName = "";

//const string loggingAdaptorNamespace = "xxx.SOA.Adaptors.Logging";
const string loggingAdaptorNamespace = "";

//const string commonDALNamespace = "xxx.SOA.DAL.Common";
const string commonDALNamespace = "";

//const string databaseNamespace = "xxx.SOA.DAL.xxxDB";
const string databaseNamespace = "";

//const string edmxModelName = "xxxDBModel";
const string edmxModelName = "";

//string inputFile = $@"..\Models\{edmxModelName}.edmx";
string inputFile = @"";




//Specify same attributes for all entity interfaces
const string attributesToAddToAll = ""; //you can specify any attributes as your design requires.
string[] extraUsings = new string[]{ "System.Data.Services", $"{loggingAdaptorNamespace}.Contracts",
	$"{databaseNamespace}.Models", $"{commonDALNamespace}.Models"}; //or: extraUsings = null;



var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var container = itemCollection.OfType<EntityContainer>().FirstOrDefault();
var pluralizer = PluralizationService.CreateService(System.Globalization.CultureInfo.CurrentCulture);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef, pluralizer);

if (container == null)
{
	return string.Empty;
}

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
	return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);
BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#><#=codeStringGenerator.ExtraUsingDirectives(extraUsings)#>
<#=codeStringGenerator.WcfDataServiceClassComments(dbName)#><#=codeStringGenerator.EntityCommonAttributes(null, attributesToAddToAll)#>
<#=Accessibility.ForType(container)#> partial class <#=dbName#>DataService : EFDataServiceBase<<#=code.Escape(container)#>>
{
	/// <summary>
	/// Initializes a new instance of the <see cref="<#=dbName#>DataService"/> class.
	/// </summary>
	/// <param name="logger">The logger.</param>
	public <#=dbName#>DataService(ILoggingService logger) : base(logger)
	{
	}

<#
	foreach (var entitySet in container.BaseEntitySets.OfType<EntitySet>())
	{
		var entityName = typeMapper.GetTypeName(entitySet.ElementType);
#>
	/// <summary>
	/// Called when [<#=code.Escape(entityName)#> change].
	/// </summary>
	/// <param name="entity">The <#=code.Escape(entityName)#> entity.</param>
	/// <param name="operationType">Type of the operation.</param>
	[ChangeInterceptor(nameof(<#=code.Escape(container)#>.<#=code.Escape(entitySet)#>))]
	<#=Accessibility.ForType(entitySet.ElementType)#> void OnChange(<#=code.Escape(entityName)#> entity, UpdateOperations operationType) =>
		OnBeforeSaveChanges(entity, operationType, nameof(<#=code.Escape(container)#>.<#=code.Escape(entitySet)#>));

<#
	}
#>
}
<#
EndNamespace(code);

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
	fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
	fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
	var codeNamespace = code.VsNamespaceSuggestion();
	if (!String.IsNullOrEmpty(codeNamespace))
	{
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
		PushIndent("    ");
	}
}

public void EndNamespace(CodeGenerationTools code)
{
	if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
	{
		PopIndent();
#>
}
<#+
	}
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
	private readonly CodeGenerationTools _code;
	private readonly TypeMapper _typeMapper;
	private readonly MetadataTools _ef;
	private readonly PluralizationService _pluralizer;

	public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef, PluralizationService pluralizer)
	{
		ArgumentNotNull(code, "code");
		ArgumentNotNull(typeMapper, "typeMapper");
		ArgumentNotNull(ef, "ef");
		ArgumentNotNull(pluralizer, "pluralizer");

		_code = code;
		_typeMapper = typeMapper;
		_ef = ef;
		_pluralizer = pluralizer;
	}

	public string EntityCommonAttributes(EntityType entity, string attributesToAddToAll)
	{
		if (string.IsNullOrEmpty(attributesToAddToAll)) return string.Empty;
		return attributesToAddToAll;
	}

	public string WcfDataServiceClassComments(string dbObjectName)
	{
		dbObjectName = (dbObjectName != null) ? (_code.Escape(dbObjectName) + " ") : string.Empty;
		var description = $" WCF data service class which holds the {dbObjectName} database information through entity framework.";
		var comments = string.Join((Environment.NewLine + "///"), "/// <summary>", description, "</summary>");
		return (comments);
	}

	public string UsingDirectives(bool inHeader, bool includeCollections = true)
	{
		return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
			? string.Format(
				CultureInfo.InvariantCulture,
				"{0}using System;{1}",
				inHeader ? Environment.NewLine : "",
				includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "")
			: "";
	}

	public string ExtraUsingDirectives(string[] extraUsings)
	{
		if (extraUsings == null) return string.Empty;
		var sb = new StringBuilder();
		foreach (var extraUsing in extraUsings)
		{
			sb.AppendFormat(
				"{0}using {1};" ,
				Environment.NewLine, extraUsing);
		}
		sb.AppendLine();
		return sb.ToString();
	}
}

public class TypeMapper
{
	private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

	private readonly System.Collections.IList _errors;
	private readonly CodeGenerationTools _code;
	private readonly MetadataTools _ef;

	public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
	{
		ArgumentNotNull(code, "code");
		ArgumentNotNull(ef, "ef");
		ArgumentNotNull(errors, "errors");

		_code = code;
		_ef = ef;
		_errors = errors;
	}

	public static string FixNamespaces(string typeName)
	{
		return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
	}

	public string GetTypeName(TypeUsage typeUsage)
	{
		return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
	}

	public string GetTypeName(EdmType edmType)
	{
		return GetTypeName(edmType, isNullable: null, modelNamespace: null);
	}

	public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
	{
		return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
	}

	public string GetTypeName(EdmType edmType, string modelNamespace)
	{
		return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
	}

	public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
	{
		if (edmType == null)
		{
			return null;
		}

		var collectionType = edmType as CollectionType;
		if (collectionType != null)
		{
			return String.Format(CultureInfo.InvariantCulture, "Collection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
		}

		var typeName = _code.Escape(edmType.MetadataProperties
								.Where(p => p.Name == ExternalTypeNameAttributeName)
								.Select(p => (string)p.Value)
								.FirstOrDefault())
			?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
				_code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
				_code.Escape(edmType));

		if (edmType is StructuralType)
		{
			return typeName;
		}

		if (edmType is SimpleType)
		{
			var clrType = UnderlyingClrType(edmType);
			if (!IsEnumType(edmType))
			{
				typeName = _code.Escape(clrType);
			}

			typeName = FixNamespaces(typeName);

			return clrType.IsValueType && isNullable == true ?
				String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
				typeName;
		}

		throw new ArgumentException("edmType");
	}

	public Type UnderlyingClrType(EdmType edmType)
	{
		ArgumentNotNull(edmType, "edmType");

		var primitiveType = edmType as PrimitiveType;
		if (primitiveType != null)
		{
			return primitiveType.ClrEquivalentType;
		}

		if (IsEnumType(edmType))
		{
			return GetEnumUnderlyingType(edmType).ClrEquivalentType;
		}

		return typeof(object);
	}

	public bool IsEnumType(GlobalItem edmType)
	{
		ArgumentNotNull(edmType, "edmType");

		return edmType.GetType().Name == "EnumType";
	}

	public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
	{
		ArgumentNotNull(enumType, "enumType");

		return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
	}

	public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
	{
		ArgumentNotNull(types, "types");
		ArgumentNotNull(sourceFile, "sourceFile");

		var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
		if (types.Any(item => !hash.Add(item)))
		{
			_errors.Add(
				new CompilerError(sourceFile, -1, -1, "6023",
					String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
			return false;
		}
		return true;
	}

	public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
	{
		return itemCollection
			.OfType<T>()
			.Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
			.OrderBy(i => i.Name);
	}

	public string GetAllItemsToInherit<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
	{
		return string.Join(",", GetItemsToGenerate<T>(itemCollection)
			.Select(i => string.Format(CultureInfo.InvariantCulture,
			"{0}	IWcf{1}Service", Environment.NewLine, i.Name)));
	}

	public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
	{
		return itemCollection
			.Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
			.Select(g => GetGlobalItemName(g));
	}

	public string GetGlobalItemName(GlobalItem item)
	{
		if (item is EdmType)
		{
			return ((EdmType)item).Name;
		}
		else
		{
			return ((EntityContainer)item).Name;
		}
	}
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
	if (arg == null)
	{
		throw new ArgumentNullException(name);
	}
}
#>